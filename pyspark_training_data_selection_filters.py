# -*- coding: utf-8 -*-
"""PySpark-Training-Data-Selection-Filters.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GR6RmtjifogdMugyFsgNDkvIxbjVGaNl
"""

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!wget -q http://archive.apache.org/dist/spark/spark-3.1.1/spark-3.1.1-bin-hadoop3.2.tgz
!tar xf spark-3.1.1-bin-hadoop3.2.tgz
!pip install -q findspark
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.1.1-bin-hadoop3.2"
import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
spark

from pyspark.sql.types import *
myschema = StructType([
 StructField('id', IntegerType()),
 StructField('first_name', StringType()),
 StructField('last_name', StringType()),
 StructField('gender', StringType()),
 StructField('City', StringType()),
 StructField('JobTitle', StringType()),
 StructField('Salary', StringType()),
 StructField('Latitude', FloatType()),
 StructField('Longitude', FloatType())
])

df = spark.read.csv("original.csv", header=True, schema=myschema)
df.show()

df_select = df.select("first_name","last_name")
df_select.show()

df_renamed = df.withColumnRenamed("first_name","fn")
df_renamed.show()

df_filter = df.filter(df.first_name == 'Alvera')
df_filter.show()

df_filter = df.filter(df.first_name.like( '%lver%'))
df_filter.show()

df_filter = df.filter(df.first_name.endswith( 'din'))
df_filter.show()

df_filter = df.filter(df.first_name.startswith( 'Alv'))
df_filter.show()

df_filter = df.filter(df.id.between(1,5))
df_filter.show()

df_filter = df.filter(df.first_name.isin('Aldin','Valma'))
df_filter.show()

df_substr = df.select(df.first_name, df.first_name.substr(1,5).alias('name'))
df_substr.show()

"""Applying Multiple Filters

"""

df_filter = df.filter((df.first_name.isin('Aldin','Valma')) & (df.City.like('%ondon')) )
df_filter.show()

df_filter = df.filter((df.id>10) &(df.id <100))
df_filter.show()

